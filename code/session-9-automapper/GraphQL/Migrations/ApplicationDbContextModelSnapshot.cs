// <auto-generated />
using System;
using ConferencePlanner.GraphQL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ConferencePlanner.GraphQL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("AttendeeSession", b =>
                {
                    b.Property<int>("AttendeesId")
                        .HasColumnType("int");

                    b.Property<int>("SessionsId")
                        .HasColumnType("int");

                    b.HasKey("AttendeesId", "SessionsId");

                    b.HasIndex("SessionsId");

                    b.ToTable("AttendeeSession");
                });

            modelBuilder.Entity("ConferencePlanner.GraphQL.Data.Attendee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Attendees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Avengers: Endgame",
                            LastName = "LastName",
                            UserName = "UserName1"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "The Lion King",
                            LastName = "LastName",
                            UserName = "UserName2"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Ip Man 4",
                            LastName = "LastName",
                            UserName = "UserName3"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Gemini Man",
                            LastName = "LastName",
                            UserName = "UserName4"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Downton Abbey",
                            LastName = "LastName",
                            UserName = "UserName5"
                        });
                });

            modelBuilder.Entity("ConferencePlanner.GraphQL.Data.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Abstract")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "The Fresh Prince of Bel-Air"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Downton Abbey"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Stranger Things"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Kantaro: The Sweet Tooth Salaryman"
                        },
                        new
                        {
                            Id = 5,
                            Title = "The Walking Dead"
                        });
                });

            modelBuilder.Entity("ConferencePlanner.GraphQL.Data.Speaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Bio")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WebSite")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Speakers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "The Fresh Prince of Bel-Air"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Downton Abbey"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Stranger Things"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kantaro: The Sweet Tooth Salaryman"
                        },
                        new
                        {
                            Id = 5,
                            Name = "The Walking Dead"
                        });
                });

            modelBuilder.Entity("ConferencePlanner.GraphQL.Data.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("SessionSpeaker", b =>
                {
                    b.Property<int>("SessionsId")
                        .HasColumnType("int");

                    b.Property<int>("SpeakersId")
                        .HasColumnType("int");

                    b.HasKey("SessionsId", "SpeakersId");

                    b.HasIndex("SpeakersId");

                    b.ToTable("SessionSpeaker");
                });

            modelBuilder.Entity("AttendeeSession", b =>
                {
                    b.HasOne("ConferencePlanner.GraphQL.Data.Attendee", null)
                        .WithMany()
                        .HasForeignKey("AttendeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConferencePlanner.GraphQL.Data.Session", null)
                        .WithMany()
                        .HasForeignKey("SessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConferencePlanner.GraphQL.Data.Session", b =>
                {
                    b.HasOne("ConferencePlanner.GraphQL.Data.Track", "Track")
                        .WithMany("Sessions")
                        .HasForeignKey("TrackId");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("SessionSpeaker", b =>
                {
                    b.HasOne("ConferencePlanner.GraphQL.Data.Session", null)
                        .WithMany()
                        .HasForeignKey("SessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConferencePlanner.GraphQL.Data.Speaker", null)
                        .WithMany()
                        .HasForeignKey("SpeakersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConferencePlanner.GraphQL.Data.Track", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
